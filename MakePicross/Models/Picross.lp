\ This file was automatically generated by Zimpl
\ param pathToDataFolder := "D:\Picross-projects\PicrossGame\MakePicross\Models\";
\ param filePuzzleSize := pathToDataFolder + "CurrentPuzzleSize.dat";
\ param numberOfRows := read filePuzzleSize as "1n" use 1 comment "#";
\ param numberOfColumns := read filePuzzleSize as "1n" skip 1 use 1 comment "#";
\ param fileCardClueRow := pathToDataFolder + "CurrentCardClueRow.dat";
\ set Rows := {read fileCardClueRow as "<1n>" comment "#"};
\ param cardClueOnRow[Rows] := read fileCardClueRow as "<1n> 2n" comment "#";
\ param fileCardClueColumn :=  pathToDataFolder + "CurrentCardClueColumn.dat";
\ set Columns := {read fileCardClueColumn as "<1n>" comment "#"};
\ param cardClueOnColumn[Columns] := read fileCardClueColumn as "<1n> 2n" comment "#";
\ param fileInfoClueRow :=  pathToDataFolder + "CurrentInfoClueRow.dat";
\ set ClueOrderOnRow := {read fileInfoClueRow as "<1n, 2n>" comment "#"};
\ param clueValueRow[ClueOrderOnRow]:= read fileInfoClueRow as "<1n, 2n> 3n" comment "#";
\ param startRangeBlockRow[ClueOrderOnRow]:= read fileInfoClueRow as "<1n, 2n> 4n" comment "#";
\ param endRangeBlockRow[ClueOrderOnRow]:= read fileInfoClueRow as "<1n, 2n> 5n" comment "#";
\ param fileInfoClueColumn := pathToDataFolder + "CurrentInfoClueColumn.dat";
\ set ClueOrderOnColumn := {read fileInfoClueColumn as "<1n, 2n>" comment "#"};
\ param clueValueColumn[ClueOrderOnColumn]:= read fileInfoClueColumn as "<1n, 2n> 3n" comment "#";
\ param startRangeBlockColumn[ClueOrderOnColumn]:= read fileInfoClueColumn as "<1n, 2n> 4n" comment "#";
\ param endRangeBlockColumn[ClueOrderOnColumn]:= read fileInfoClueColumn as "<1n, 2n> 5n" comment "#";
\ var x[Rows * Columns] binary;
\ var y[ClueOrderOnRow * Columns] binary;
\ var z[Rows * ClueOrderOnColumn] binary;
\ subto RowEmpty:  forall <iRow> in Rows with cardClueOnRow[iRow] == 0 do   forall <jColumn> in Columns do     x[iRow, jColumn]
\  == 0;
\ subto RowUniqueStartBlock:  forall <iRow, pBlock> in ClueOrderOnRow do   sum <jColumn> in Columns: y[iRow, pBlock, jColumn] =
\ = 1;
\ subto RowRestrictRangeBlock:  forall <iRow, pBlock> in ClueOrderOnRow do   forall <jColumn> in Columns with jColumn < startRa
\ ngeBlockRow[iRow, pBlock] or jColumn > endRangeBlockRow[iRow, pBlock] do    y[iRow, pBlock, jColumn] == 0;
\ subto RowBlockCells:  forall <iRow, pBlock> in ClueOrderOnRow do   forall <jColumn> in {startRangeBlockRow[iRow, pBlock] .. e
\ ndRangeBlockRow[iRow, pBlock]} do    forall <ell> in {0 .. clueValueRow[iRow, pBlock] - 1} do     y[iRow, pBlock, jColumn] <=
\  x[iRow, jColumn + ell];
\ subto RowBlockOrderForward:  forall <iRow, pBlock> in ClueOrderOnRow with cardClueOnRow[iRow] >= 2 and pBlock <= cardClueOnRo
\ w[iRow] - 1 do   forall <jColumn> in {startRangeBlockRow[iRow, pBlock] .. endRangeBlockRow[iRow, pBlock]} do    y[iRow, pBloc
\ k, jColumn] + sum <ell> in {1 .. jColumn + clueValueRow[iRow, pBlock]}: y[iRow, pBlock + 1, ell] <= 1;
\ subto RowTotalBlackCells:   forall <iRow> in Rows with cardClueOnRow[iRow] >= 1 do    sum <jColumn> in Columns: x[iRow, jColu
\ mn] == sum <pBlock> in {1 .. cardClueOnRow[iRow]}: clueValueRow[iRow, pBlock];
\ subto ColumnEmpty:  forall <jColumn> in Columns with cardClueOnColumn[jColumn] == 0 do   forall <iRow> in Rows do     x[iRow,
\  jColumn] == 0;
\ subto ColumnUniqueStartBlock:  forall <jColumn, qBlock> in ClueOrderOnColumn do   sum <iRow> in Rows: z[iRow, jColumn, qBlock
\ ] == 1;
\ subto ColumnRestrictRangeBlock:  forall <jColumn, qBlock> in ClueOrderOnColumn do   forall <iRow> in Rows with iRow < startRa
\ ngeBlockColumn[jColumn, qBlock] or iRow > endRangeBlockColumn[jColumn, qBlock] do    z[iRow, jColumn, qBlock] == 0;
\ subto ColumnBlockCells:  forall <jColumn, qBlock> in ClueOrderOnColumn do   forall <iRow> in {startRangeBlockColumn[jColumn, 
\ qBlock] .. endRangeBlockColumn[jColumn, qBlock]} do    forall <ell> in {0 .. clueValueColumn[jColumn, qBlock] - 1} do     z[i
\ Row, jColumn, qBlock] <= x[iRow + ell, jColumn];
\ subto ColumnBlockOrderForward:  forall <jColumn, qBlock> in ClueOrderOnColumn with cardClueOnColumn[jColumn] >= 2 and qBlock 
\ <= cardClueOnColumn[jColumn] - 1 do   forall <iRow> in {startRangeBlockColumn[jColumn, qBlock] .. endRangeBlockColumn[jColumn
\ , qBlock]} do    z[iRow, jColumn, qBlock] + sum <ell> in {1 .. iRow + clueValueColumn[jColumn, qBlock]}: z[ell, jColumn, qBlo
\ ck + 1] <= 1;
\ subto ColumnTotalBlackCells:   forall <jColumn> in Columns with cardClueOnColumn[jColumn] >= 1 do    sum <iRow> in Rows: x[iR
\ ow, jColumn] == sum <qBlock> in {1 .. cardClueOnColumn[jColumn]}: clueValueColumn[jColumn, qBlock];
\Problem name: D:\Picross-projects\PicrossGame\MakePicross\Models\Picross.zpl
Minimize
 Objective: 
Subject to
 RowUniqueStart@0:
  + y#1#1#6 + y#1#1#5 + y#1#1#4 + y#1#1#3 + y#1#1#2 + y#1#1#1
  = 1
 RowUniqueStart@1:
  + y#1#2#6 + y#1#2#5 + y#1#2#4 + y#1#2#3 + y#1#2#2 + y#1#2#1
  = 1
 RowUniqueStart@2:
  + y#1#3#6 + y#1#3#5 + y#1#3#4 + y#1#3#3 + y#1#3#2 + y#1#3#1
  = 1
 RowUniqueStart@3:
  + y#2#1#6 + y#2#1#5 + y#2#1#4 + y#2#1#3 + y#2#1#2 + y#2#1#1
  = 1
 RowUniqueStart@4:
  + y#3#1#6 + y#3#1#5 + y#3#1#4 + y#3#1#3 + y#3#1#2 + y#3#1#1
  = 1
 RowUniqueStart@5:
  + y#3#2#6 + y#3#2#5 + y#3#2#4 + y#3#2#3 + y#3#2#2 + y#3#2#1
  = 1
 RowUniqueStart@6:
  + y#3#3#6 + y#3#3#5 + y#3#3#4 + y#3#3#3 + y#3#3#2 + y#3#3#1
  = 1
 RowUniqueStart@7:
  + y#4#1#6 + y#4#1#5 + y#4#1#4 + y#4#1#3 + y#4#1#2 + y#4#1#1
  = 1
 RowUniqueStart@8:
  + y#4#2#6 + y#4#2#5 + y#4#2#4 + y#4#2#3 + y#4#2#2 + y#4#2#1
  = 1
 RowRestrictRan@9:
  + y#1#1#3 = 0
 RowRestrictRan@a:
  + y#1#1#4 = 0
 RowRestrictRan@b:
  + y#1#1#5 = 0
 RowRestrictRan@c:
  + y#1#1#6 = 0
 RowRestrictRan@d:
  + y#1#2#1 = 0
 RowRestrictRan@e:
  + y#1#2#2 = 0
 RowRestrictRan@f:
  + y#1#2#5 = 0
 RowRestrictRa@10:
  + y#1#2#6 = 0
 RowRestrictRa@11:
  + y#1#3#1 = 0
 RowRestrictRa@12:
  + y#1#3#2 = 0
 RowRestrictRa@13:
  + y#1#3#3 = 0
 RowRestrictRa@14:
  + y#1#3#4 = 0
 RowRestrictRa@15:
  + y#2#1#5 = 0
 RowRestrictRa@16:
  + y#2#1#6 = 0
 RowRestrictRa@17:
  + y#3#1#3 = 0
 RowRestrictRa@18:
  + y#3#1#4 = 0
 RowRestrictRa@19:
  + y#3#1#5 = 0
 RowRestrictRa@1a:
  + y#3#1#6 = 0
 RowRestrictRa@1b:
  + y#3#2#1 = 0
 RowRestrictRa@1c:
  + y#3#2#2 = 0
 RowRestrictRa@1d:
  + y#3#2#5 = 0
 RowRestrictRa@1e:
  + y#3#2#6 = 0
 RowRestrictRa@1f:
  + y#3#3#1 = 0
 RowRestrictRa@20:
  + y#3#3#2 = 0
 RowRestrictRa@21:
  + y#3#3#3 = 0
 RowRestrictRa@22:
  + y#3#3#4 = 0
 RowRestrictRa@23:
  + y#4#1#4 = 0
 RowRestrictRa@24:
  + y#4#1#5 = 0
 RowRestrictRa@25:
  + y#4#1#6 = 0
 RowRestrictRa@26:
  + y#4#2#1 = 0
 RowRestrictRa@27:
  + y#4#2#2 = 0
 RowRestrictRa@28:
  + y#4#2#6 = 0
 RowBlockCells_1:
  - x#1#1 + y#1#1#1 <= 0
 RowBlockCells_2:
  - x#1#2 + y#1#1#2 <= 0
 RowBlockCells_3:
  - x#1#3 + y#1#2#3 <= 0
 RowBlockCells_4:
  - x#1#4 + y#1#2#4 <= 0
 RowBlockCells_5:
  - x#1#5 + y#1#3#5 <= 0
 RowBlockCells_6:
  - x#1#6 + y#1#3#6 <= 0
 RowBlockCells_7:
  - x#2#1 + y#2#1#1 <= 0
 RowBlockCells_8:
  - x#2#2 + y#2#1#1 <= 0
 RowBlockCells_9:
  - x#2#3 + y#2#1#1 <= 0
 RowBlockCells_10:
  - x#2#2 + y#2#1#2 <= 0
 RowBlockCells_11:
  - x#2#3 + y#2#1#2 <= 0
 RowBlockCells_12:
  - x#2#4 + y#2#1#2 <= 0
 RowBlockCells_13:
  - x#2#3 + y#2#1#3 <= 0
 RowBlockCells_14:
  - x#2#4 + y#2#1#3 <= 0
 RowBlockCells_15:
  - x#2#5 + y#2#1#3 <= 0
 RowBlockCells_16:
  - x#2#4 + y#2#1#4 <= 0
 RowBlockCells_17:
  - x#2#5 + y#2#1#4 <= 0
 RowBlockCells_18:
  - x#2#6 + y#2#1#4 <= 0
 RowBlockCells_19:
  - x#3#1 + y#3#1#1 <= 0
 RowBlockCells_20:
  - x#3#2 + y#3#1#2 <= 0
 RowBlockCells_21:
  - x#3#3 + y#3#2#3 <= 0
 RowBlockCells_22:
  - x#3#4 + y#3#2#4 <= 0
 RowBlockCells_23:
  - x#3#5 + y#3#3#5 <= 0
 RowBlockCells_24:
  - x#3#6 + y#3#3#6 <= 0
 RowBlockCells_25:
  - x#4#1 + y#4#1#1 <= 0
 RowBlockCells_26:
  - x#4#2 + y#4#1#2 <= 0
 RowBlockCells_27:
  - x#4#3 + y#4#1#3 <= 0
 RowBlockCells_28:
  - x#4#3 + y#4#2#3 <= 0
 RowBlockCells_29:
  - x#4#4 + y#4#2#3 <= 0
 RowBlockCells_30:
  - x#4#4 + y#4#2#4 <= 0
 RowBlockCells_31:
  - x#4#5 + y#4#2#4 <= 0
 RowBlockCells_32:
  - x#4#5 + y#4#2#5 <= 0
 RowBlockCells_33:
  - x#4#6 + y#4#2#5 <= 0
 RowBlockOrder@4a:
  + y#1#2#2 + y#1#2#1 + y#1#1#1 <= 1
 RowBlockOrder@4b:
  + y#1#2#3 + y#1#2#2 + y#1#2#1 + y#1#1#2 <= 1
 RowBlockOrder@4c:
  + y#1#3#4 + y#1#3#3 + y#1#3#2 + y#1#3#1 + y#1#2#3 <= 1
 RowBlockOrder@4d:
  + y#1#3#5 + y#1#3#4 + y#1#3#3 + y#1#3#2 + y#1#3#1 + y#1#2#4
  <= 1
 RowBlockOrder@4e:
  + y#3#2#2 + y#3#2#1 + y#3#1#1 <= 1
 RowBlockOrder@4f:
  + y#3#2#3 + y#3#2#2 + y#3#2#1 + y#3#1#2 <= 1
 RowBlockOrder@50:
  + y#3#3#4 + y#3#3#3 + y#3#3#2 + y#3#3#1 + y#3#2#3 <= 1
 RowBlockOrder@51:
  + y#3#3#5 + y#3#3#4 + y#3#3#3 + y#3#3#2 + y#3#3#1 + y#3#2#4
  <= 1
 RowBlockOrder@52:
  + y#4#2#2 + y#4#2#1 + y#4#1#1 <= 1
 RowBlockOrder@53:
  + y#4#2#3 + y#4#2#2 + y#4#2#1 + y#4#1#2 <= 1
 RowBlockOrder@54:
  + y#4#2#4 + y#4#2#3 + y#4#2#2 + y#4#2#1 + y#4#1#3 <= 1
 RowTotalBlack@55:
  + x#1#6 + x#1#5 + x#1#4 + x#1#3 + x#1#2 + x#1#1
  = 3
 RowTotalBlack@56:
  + x#2#6 + x#2#5 + x#2#4 + x#2#3 + x#2#2 + x#2#1
  = 3
 RowTotalBlack@57:
  + x#3#6 + x#3#5 + x#3#4 + x#3#3 + x#3#2 + x#3#1
  = 3
 RowTotalBlack@58:
  + x#4#6 + x#4#5 + x#4#4 + x#4#3 + x#4#2 + x#4#1
  = 3
 ColumnEmpty_1:
  + x#1#1 = 0
 ColumnEmpty_2:
  + x#2#1 = 0
 ColumnEmpty_3:
  + x#3#1 = 0
 ColumnEmpty_4:
  + x#4#1 = 0
 ColumnUniqueS@5d:
  + z#4#2#1 + z#3#2#1 + z#2#2#1 + z#1#2#1 = 1
 ColumnUniqueS@5e:
  + z#4#2#2 + z#3#2#2 + z#2#2#2 + z#1#2#2 = 1
 ColumnUniqueS@5f:
  + z#4#3#1 + z#3#3#1 + z#2#3#1 + z#1#3#1 = 1
 ColumnUniqueS@60:
  + z#4#3#2 + z#3#3#2 + z#2#3#2 + z#1#3#2 = 1
 ColumnUniqueS@61:
  + z#4#4#1 + z#3#4#1 + z#2#4#1 + z#1#4#1 = 1
 ColumnUniqueS@62:
  + z#4#5#1 + z#3#5#1 + z#2#5#1 + z#1#5#1 = 1
 ColumnUniqueS@63:
  + z#4#5#2 + z#3#5#2 + z#2#5#2 + z#1#5#2 = 1
 ColumnUniqueS@64:
  + z#4#6#1 + z#3#6#1 + z#2#6#1 + z#1#6#1 = 1
 ColumnUniqueS@65:
  + z#4#6#2 + z#3#6#2 + z#2#6#2 + z#1#6#2 = 1
 ColumnRestric@66:
  + z#3#2#1 = 0
 ColumnRestric@67:
  + z#4#2#1 = 0
 ColumnRestric@68:
  + z#1#2#2 = 0
 ColumnRestric@69:
  + z#2#2#2 = 0
 ColumnRestric@6a:
  + z#3#3#1 = 0
 ColumnRestric@6b:
  + z#4#3#1 = 0
 ColumnRestric@6c:
  + z#1#3#2 = 0
 ColumnRestric@6d:
  + z#2#3#2 = 0
 ColumnRestric@6e:
  + z#3#4#1 = 0
 ColumnRestric@6f:
  + z#4#4#1 = 0
 ColumnRestric@70:
  + z#3#5#1 = 0
 ColumnRestric@71:
  + z#4#5#1 = 0
 ColumnRestric@72:
  + z#1#5#2 = 0
 ColumnRestric@73:
  + z#2#5#2 = 0
 ColumnRestric@74:
  + z#2#6#1 = 0
 ColumnRestric@75:
  + z#3#6#1 = 0
 ColumnRestric@76:
  + z#4#6#1 = 0
 ColumnRestric@77:
  + z#1#6#2 = 0
 ColumnRestric@78:
  + z#2#6#2 = 0
 ColumnRestric@79:
  + z#4#6#2 = 0
 ColumnBlockCe@7a:
  - x#1#2 + z#1#2#1 <= 0
 ColumnBlockCe@7b:
  - x#2#2 + z#2#2#1 <= 0
 ColumnBlockCe@7c:
  - x#3#2 + z#3#2#2 <= 0
 ColumnBlockCe@7d:
  - x#4#2 + z#4#2#2 <= 0
 ColumnBlockCe@7e:
  - x#1#3 + z#1#3#1 <= 0
 ColumnBlockCe@7f:
  - x#2#3 + z#2#3#1 <= 0
 ColumnBlockCe@80:
  - x#3#3 + z#3#3#2 <= 0
 ColumnBlockCe@81:
  - x#4#3 + z#4#3#2 <= 0
 ColumnBlockCe@82:
  - x#1#4 + z#1#4#1 <= 0
 ColumnBlockCe@83:
  - x#2#4 + z#1#4#1 <= 0
 ColumnBlockCe@84:
  - x#3#4 + z#1#4#1 <= 0
 ColumnBlockCe@85:
  - x#2#4 + z#2#4#1 <= 0
 ColumnBlockCe@86:
  - x#3#4 + z#2#4#1 <= 0
 ColumnBlockCe@87:
  - x#4#4 + z#2#4#1 <= 0
 ColumnBlockCe@88:
  - x#1#5 + z#1#5#1 <= 0
 ColumnBlockCe@89:
  - x#2#5 + z#2#5#1 <= 0
 ColumnBlockCe@8a:
  - x#3#5 + z#3#5#2 <= 0
 ColumnBlockCe@8b:
  - x#4#5 + z#4#5#2 <= 0
 ColumnBlockCe@8c:
  - x#1#6 + z#1#6#1 <= 0
 ColumnBlockCe@8d:
  - x#3#6 + z#3#6#2 <= 0
 ColumnBlockCe@8e:
  - x#4#6 + z#3#6#2 <= 0
 ColumnBlockOr@8f:
  + z#2#2#2 + z#1#2#2 + z#1#2#1 <= 1
 ColumnBlockOr@90:
  + z#3#2#2 + z#2#2#2 + z#1#2#2 + z#2#2#1 <= 1
 ColumnBlockOr@91:
  + z#2#3#2 + z#1#3#2 + z#1#3#1 <= 1
 ColumnBlockOr@92:
  + z#3#3#2 + z#2#3#2 + z#1#3#2 + z#2#3#1 <= 1
 ColumnBlockOr@93:
  + z#2#5#2 + z#1#5#2 + z#1#5#1 <= 1
 ColumnBlockOr@94:
  + z#3#5#2 + z#2#5#2 + z#1#5#2 + z#2#5#1 <= 1
 ColumnBlockOr@95:
  + z#2#6#2 + z#1#6#2 + z#1#6#1 <= 1
 ColumnTotalBl@96:
  + x#4#2 + x#3#2 + x#2#2 + x#1#2 = 2
 ColumnTotalBl@97:
  + x#4#3 + x#3#3 + x#2#3 + x#1#3 = 2
 ColumnTotalBl@98:
  + x#4#4 + x#3#4 + x#2#4 + x#1#4 = 3
 ColumnTotalBl@99:
  + x#4#5 + x#3#5 + x#2#5 + x#1#5 = 2
 ColumnTotalBl@9a:
  + x#4#6 + x#3#6 + x#2#6 + x#1#6 = 3
Bounds
 0 <= x#1#1 <= 1
 0 <= x#1#2 <= 1
 0 <= x#1#3 <= 1
 0 <= x#1#4 <= 1
 0 <= x#1#5 <= 1
 0 <= x#1#6 <= 1
 0 <= x#2#1 <= 1
 0 <= x#2#2 <= 1
 0 <= x#2#3 <= 1
 0 <= x#2#4 <= 1
 0 <= x#2#5 <= 1
 0 <= x#2#6 <= 1
 0 <= x#3#1 <= 1
 0 <= x#3#2 <= 1
 0 <= x#3#3 <= 1
 0 <= x#3#4 <= 1
 0 <= x#3#5 <= 1
 0 <= x#3#6 <= 1
 0 <= x#4#1 <= 1
 0 <= x#4#2 <= 1
 0 <= x#4#3 <= 1
 0 <= x#4#4 <= 1
 0 <= x#4#5 <= 1
 0 <= x#4#6 <= 1
 0 <= y#1#1#1 <= 1
 0 <= y#1#1#2 <= 1
 0 <= y#1#1#3 <= 1
 0 <= y#1#1#4 <= 1
 0 <= y#1#1#5 <= 1
 0 <= y#1#1#6 <= 1
 0 <= y#1#2#1 <= 1
 0 <= y#1#2#2 <= 1
 0 <= y#1#2#3 <= 1
 0 <= y#1#2#4 <= 1
 0 <= y#1#2#5 <= 1
 0 <= y#1#2#6 <= 1
 0 <= y#1#3#1 <= 1
 0 <= y#1#3#2 <= 1
 0 <= y#1#3#3 <= 1
 0 <= y#1#3#4 <= 1
 0 <= y#1#3#5 <= 1
 0 <= y#1#3#6 <= 1
 0 <= y#2#1#1 <= 1
 0 <= y#2#1#2 <= 1
 0 <= y#2#1#3 <= 1
 0 <= y#2#1#4 <= 1
 0 <= y#2#1#5 <= 1
 0 <= y#2#1#6 <= 1
 0 <= y#3#1#1 <= 1
 0 <= y#3#1#2 <= 1
 0 <= y#3#1#3 <= 1
 0 <= y#3#1#4 <= 1
 0 <= y#3#1#5 <= 1
 0 <= y#3#1#6 <= 1
 0 <= y#3#2#1 <= 1
 0 <= y#3#2#2 <= 1
 0 <= y#3#2#3 <= 1
 0 <= y#3#2#4 <= 1
 0 <= y#3#2#5 <= 1
 0 <= y#3#2#6 <= 1
 0 <= y#3#3#1 <= 1
 0 <= y#3#3#2 <= 1
 0 <= y#3#3#3 <= 1
 0 <= y#3#3#4 <= 1
 0 <= y#3#3#5 <= 1
 0 <= y#3#3#6 <= 1
 0 <= y#4#1#1 <= 1
 0 <= y#4#1#2 <= 1
 0 <= y#4#1#3 <= 1
 0 <= y#4#1#4 <= 1
 0 <= y#4#1#5 <= 1
 0 <= y#4#1#6 <= 1
 0 <= y#4#2#1 <= 1
 0 <= y#4#2#2 <= 1
 0 <= y#4#2#3 <= 1
 0 <= y#4#2#4 <= 1
 0 <= y#4#2#5 <= 1
 0 <= y#4#2#6 <= 1
 0 <= z#1#2#1 <= 1
 0 <= z#1#2#2 <= 1
 0 <= z#1#3#1 <= 1
 0 <= z#1#3#2 <= 1
 0 <= z#1#4#1 <= 1
 0 <= z#1#5#1 <= 1
 0 <= z#1#5#2 <= 1
 0 <= z#1#6#1 <= 1
 0 <= z#1#6#2 <= 1
 0 <= z#2#2#1 <= 1
 0 <= z#2#2#2 <= 1
 0 <= z#2#3#1 <= 1
 0 <= z#2#3#2 <= 1
 0 <= z#2#4#1 <= 1
 0 <= z#2#5#1 <= 1
 0 <= z#2#5#2 <= 1
 0 <= z#2#6#1 <= 1
 0 <= z#2#6#2 <= 1
 0 <= z#3#2#1 <= 1
 0 <= z#3#2#2 <= 1
 0 <= z#3#3#1 <= 1
 0 <= z#3#3#2 <= 1
 0 <= z#3#4#1 <= 1
 0 <= z#3#5#1 <= 1
 0 <= z#3#5#2 <= 1
 0 <= z#3#6#1 <= 1
 0 <= z#3#6#2 <= 1
 0 <= z#4#2#1 <= 1
 0 <= z#4#2#2 <= 1
 0 <= z#4#3#1 <= 1
 0 <= z#4#3#2 <= 1
 0 <= z#4#4#1 <= 1
 0 <= z#4#5#1 <= 1
 0 <= z#4#5#2 <= 1
 0 <= z#4#6#1 <= 1
 0 <= z#4#6#2 <= 1
General
 x#1#1
 x#1#2
 x#1#3
 x#1#4
 x#1#5
 x#1#6
 x#2#1
 x#2#2
 x#2#3
 x#2#4
 x#2#5
 x#2#6
 x#3#1
 x#3#2
 x#3#3
 x#3#4
 x#3#5
 x#3#6
 x#4#1
 x#4#2
 x#4#3
 x#4#4
 x#4#5
 x#4#6
 y#1#1#1
 y#1#1#2
 y#1#1#3
 y#1#1#4
 y#1#1#5
 y#1#1#6
 y#1#2#1
 y#1#2#2
 y#1#2#3
 y#1#2#4
 y#1#2#5
 y#1#2#6
 y#1#3#1
 y#1#3#2
 y#1#3#3
 y#1#3#4
 y#1#3#5
 y#1#3#6
 y#2#1#1
 y#2#1#2
 y#2#1#3
 y#2#1#4
 y#2#1#5
 y#2#1#6
 y#3#1#1
 y#3#1#2
 y#3#1#3
 y#3#1#4
 y#3#1#5
 y#3#1#6
 y#3#2#1
 y#3#2#2
 y#3#2#3
 y#3#2#4
 y#3#2#5
 y#3#2#6
 y#3#3#1
 y#3#3#2
 y#3#3#3
 y#3#3#4
 y#3#3#5
 y#3#3#6
 y#4#1#1
 y#4#1#2
 y#4#1#3
 y#4#1#4
 y#4#1#5
 y#4#1#6
 y#4#2#1
 y#4#2#2
 y#4#2#3
 y#4#2#4
 y#4#2#5
 y#4#2#6
 z#1#2#1
 z#1#2#2
 z#1#3#1
 z#1#3#2
 z#1#4#1
 z#1#5#1
 z#1#5#2
 z#1#6#1
 z#1#6#2
 z#2#2#1
 z#2#2#2
 z#2#3#1
 z#2#3#2
 z#2#4#1
 z#2#5#1
 z#2#5#2
 z#2#6#1
 z#2#6#2
 z#3#2#1
 z#3#2#2
 z#3#3#1
 z#3#3#2
 z#3#4#1
 z#3#5#1
 z#3#5#2
 z#3#6#1
 z#3#6#2
 z#4#2#1
 z#4#2#2
 z#4#3#1
 z#4#3#2
 z#4#4#1
 z#4#5#1
 z#4#5#2
 z#4#6#1
 z#4#6#2
End
